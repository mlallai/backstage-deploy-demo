name: Build and Deploy Docker Image

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Run tests
        run: |
          cd ./backstage-app
          yarn install --frozen-lockfile
          yarn test

      - name: Build and push Docker image to AWS ECR
        id: build-image
        run: |
          cd ./backstage-app
          IMAGE_URI="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/backstage-app:latest"
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI

      - name: Force ECS service redeployment
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.AWS_BACKSTAGE_CLUSTER }} \
            --service ${{ secrets.AWS_BACKSTAGE_SERVICE }} \
            --force-new-deployment
          
      - name: Wait for service to stabilize
        run: |
          aws ecs wait services-stable \
            --cluster ${{ secrets.AWS_BACKSTAGE_CLUSTER }} \
            --services ${{ secrets.AWS_BACKSTAGE_SERVICE }}
          
      - name: Get deployment status
        run: |
          echo "Deployment complete. Service details:"
          aws ecs describe-services \
            --cluster ${{ secrets.AWS_BACKSTAGE_CLUSTER }} \
            --services ${{ secrets.AWS_BACKSTAGE_SERVICE }} \
            --query 'services[0].{Status:status,RunningCount:runningCount,DesiredCount:desiredCount,PendingCount:pendingCount,DeploymentStatus:deployments[0].status}'